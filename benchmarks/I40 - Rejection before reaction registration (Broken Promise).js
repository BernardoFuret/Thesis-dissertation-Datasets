/**
 * > Rejection before reject reaction registration
 * 
 * The `then` method, if not receiving a function as
 * the second argument, it defaults to a function that
 * throws the received error. In this case, it's what
 * happens. Since no `catch` is chained to that new Promise,
 * the error propagates to the top level. The `catch` presented
 * in the next line will never be reached, because the default
 * `onRejection` function generated by `then` will be called first.
 */
const p1 = new Promise( ( resolve, reject ) => {
	reject( 1 );
} );

p1.then( console.log );

p1.catch( console.warn );